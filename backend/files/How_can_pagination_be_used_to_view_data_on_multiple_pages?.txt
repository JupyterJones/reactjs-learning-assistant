Pagination in a ReactJS/FastAPI application involves splitting a large dataset into smaller, manageable pages displayed sequentially to the user.  FastAPI handles the server-side pagination by fetching and slicing data, while React renders and manages the UI elements for navigating between pages.

**FastAPI (Backend):**

FastAPI uses parameters in the request to determine which page of data to return.  Common approaches include:

* **`limit` and `offset`:**  `limit` specifies the number of items per page, and `offset` specifies the starting index.  For example, `limit=10&offset=20` would retrieve items 21-30.

* **`page` and `size`:**  `page` represents the page number (starting from 1), and `size` represents the number of items per page.  This is often more user-friendly.  `page=3&size=10` would retrieve items 21-30 (equivalent to the previous example).


**Example FastAPI code:**

```python
from fastapi import FastAPI, Query
from typing import List

app = FastAPI()

data = list(range(100)) # Simulate a large dataset

@app.get("/items/")
async def read_items(
    page: int = Query(1, ge=1),  # Page number, minimum 1
    size: int = Query(10, ge=1, le=50) # Page size, between 1 and 50
):
    start = (page - 1) * size
    end = min(start + size, len(data))
    return {"items": data[start:end], "total": len(data)}
```

**ReactJS (Frontend):**

React handles displaying the paginated data and providing navigation controls.  It makes a request to the FastAPI endpoint, receiving the paginated data and total count.  It then renders the current page's data and buttons for navigating to previous and next pages.

**Example React code (simplified):**

```javascript
import React, { useState, useEffect } from 'react';

function App() {
  const [items, setItems] = useState([]);
  const [page, setPage] = useState(1);
  const [size] = useState(10);
  const [total, setTotal] = useState(0);

  useEffect(() => {
    fetch(`/items/?page=${page}&size=${size}`)
      .then(res => res.json())
      .then(data => {
        setItems(data.items);
        setTotal(data.total);
      });
  }, [page, size]);

  const handlePageChange = (newPage) => {
    if (newPage >= 1 && newPage <= Math.ceil(total / size)) {
      setPage(newPage);
    }
  };

  return (
    <div>
      {items.map(item => <div key={item}>{item}</div>)}
      <div>
        <button onClick={() => handlePageChange(page - 1)} disabled={page === 1}>Previous</button>
        <button onClick={() => handlePageChange(page + 1)} disabled={page === Math.ceil(total / size)}>Next</button>
      </div>
    </div>
  );
}

export default App;
```

This shows a basic implementation.  More advanced features like page number input, total page count display, and loading indicators would enhance the user experience.  Libraries like `react-paginate` can simplify the implementation of these features.  Remember to handle potential errors during API calls in a production environment.