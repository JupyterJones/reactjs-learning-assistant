In React, `setState` is the primary method for updating a component's state.  State is data that's specific to a component and causes the component to re-render when it changes.  Crucially, `setState` is *asynchronous* and *batching* might occur.  This means:

1. **Asynchronous:**  Calling `setState` doesn't immediately update the state.  React batches multiple `setState` calls for efficiency.  Therefore, relying on the state's value immediately after calling `setState` is unreliable.  Use the `useEffect` hook with a dependency array to react to state changes.

2. **Batching:** Multiple calls to `setState` within a single event might be merged into a single update.  This optimizes performance but can lead to unexpected results if you're relying on the state to update sequentially.


**Examples:**

**Example 1: Simple Counter**

```javascript
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}

export default Counter;
```

Here, clicking the button calls `setCount(count + 1)`, incrementing the `count` state.  React then re-renders the component, displaying the updated count.


**Example 2: Updating Multiple State Values**

```javascript
import React, { useState } from 'react';

function Form() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  const handleSubmit = () => {
    setName('');
    setEmail(''); //Setting multiple states at once
  };

  return (
    <form>
      <input type="text" value={name} onChange={e => setName(e.target.value)} />
      <input type="email" value={email} onChange={e => setEmail(e.target.value)} />
      <button onClick={handleSubmit}>Submit</button>
    </form>
  );
}

export default Form;

```

This example shows updating multiple state variables simultaneously.  While React may batch these updates, it's best practice to leverage the functional update pattern (shown below) for complex state logic to prevent unexpected behaviors.


**Example 3: Functional Update (for complex state changes)**

```javascript
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  const incrementCount = () => {
    setCount(prevCount => prevCount + 1); //Functional Update. Prevents unexpected behavior from asynchronous nature
  };

  return (
    <div>
       <p>You clicked {count} times</p>
      <button onClick={incrementCount}>
        Click me
      </button>
    </div>
  );
}

export default Counter;
```

The functional update pattern takes the previous state as an argument, ensuring you're always working with the latest value, which is especially important with asynchronous updates and prevents unexpected behaviors from race conditions.  This is the recommended approach for any state update that depends on the current state value.