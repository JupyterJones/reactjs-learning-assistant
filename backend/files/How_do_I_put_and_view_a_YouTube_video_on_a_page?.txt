In a ReactJS frontend communicating with a FastAPI backend, handling YouTube videos involves two main parts:

**1. Frontend (ReactJS):**  You'll use the YouTube IFrame Player API to embed the video.  This involves dynamically creating an `<iframe>` element.  FastAPI's role here is only to provide the video ID (or potentially a URL, though the ID is preferred for efficiency).


```jsx
import React, { useEffect, useRef } from 'react';

function YouTubeVideo({ videoId }) {
  const iframeRef = useRef(null);

  useEffect(() => {
    if (videoId && iframeRef.current) {
      const tag = document.createElement('script');
      tag.src = "https://www.youtube.com/iframe_api";
      const firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      window.onYouTubeIframeAPIReady = () => {
        new window.YT.Player(iframeRef.current, {
          height: '390',
          width: '640',
          videoId: videoId,
          playerVars: {
            // https://developers.google.com/youtube/player_parameters
            'controls': 1, // Show controls
            'rel': 0,       // Hide related videos
            'modestbranding': 1 // Hide YouTube branding
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      };

      const onPlayerReady = (event) => {
        //Do something when the player is ready
        console.log('Player ready', event);
      };

      const onPlayerStateChange = (event) => {
        //Do something when the player state changes
        console.log('Player state changed', event);
      };
    }

    //Clean up the script tag on unmount to avoid memory leak.
    return () => {
      if(window.onYouTubeIframeAPIReady){
        delete window.onYouTubeIframeAPIReady;
      }
    }
  }, [videoId]);


  return (
    <div>
      <div ref={iframeRef} />
    </div>
  );
}

export default YouTubeVideo;
```

Then, in your component you would call it like this:

```jsx
<YouTubeVideo videoId="dQw4w9WgXcQ" />  {/* Replace with your video ID */}
```


**2. Backend (FastAPI):**  FastAPI could fetch the video ID from a database, handle user input, or retrieve it from another API (though directly using the YouTube ID is simpler in most cases).  A simple example:

```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/video_id")
async def get_video_id():
    #  Replace this with your logic to get the video ID.  This is a placeholder.
    return {"video_id": "dQw4w9WgXcQ"}
```

Your React component would then make a fetch request to `/video_id` to get the `video_id` and pass it to the `YouTubeVideo` component.

**Important Considerations:**

* **Error Handling:** Implement robust error handling in both the frontend and backend to gracefully handle cases where the video ID is invalid or the YouTube API is unavailable.
* **API Keys:**  For more advanced YouTube API functionalities (like searching for videos), you will need a YouTube Data API v3 key.  This is *not* required for simple embedding.
* **Security:**  Sanitize any user-provided input to prevent XSS vulnerabilities.


This approach keeps the frontend and backend cleanly separated, following best practices for modern web development.  The backend handles data fetching, while the frontend handles the user interface and interaction with the YouTube Player API. Remember to replace placeholder video IDs with your actual video IDs.