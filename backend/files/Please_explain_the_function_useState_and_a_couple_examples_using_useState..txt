In React, `useState` is a Hook that lets you add stateful behavior to functional components.  State is essentially data that can change over time, causing the component to re-render.  `useState` returns an array with two elements:

1. **The current state value:** This is the data you're storing.
2. **A function to update the state:** This function is used to modify the state value.

**Examples:**

**Example 1: Simple Counter**

```javascript
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0); // Initial state is 0

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}

export default Counter;
```

Here, `useState(0)` initializes the `count` state to 0.  Clicking the button calls `setCount(count + 1)`, incrementing the count and causing the component to re-render, displaying the updated count.


**Example 2:  Managing Form Input**

```javascript
import React, { useState } from 'react';

function MyForm() {
  const [name, setName] = useState(''); // Initial state is an empty string

  const handleSubmit = (event) => {
    event.preventDefault();
    // Do something with the name, e.g., send it to an API
    console.log('Name:', name);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
}

export default MyForm;
```

This example uses `useState('')` to manage the input value. The `onChange` event handler calls `setName(e.target.value)`, updating the state with the value entered in the input field.  This keeps the displayed value in sync with user input.


**Important Note:** FastAPI (a Python framework) is completely separate from React (a JavaScript framework).  They are used for different parts of an application: FastAPI typically handles the backend (API), while React handles the frontend (user interface).  `useState` is exclusively a React concept and is not used in FastAPI.  They often work together: a React frontend might make requests to a FastAPI backend to fetch or update data, and `useState` would be used to manage that data in the React component.