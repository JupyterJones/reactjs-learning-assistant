The ReactJS Learning Assistant is a dynamic web application designed to help users master ReactJS. It offers an interactive experience where users can ask questions, receive detailed AI-powered answers, and explore a personalized history of their learning journey. At its core, this app blends education and utility, making learning ReactJS a hands-on experience.

The frontend is built with ReactJS, React Router, Axios, and TypeScript. It offers a smooth and responsive interface, allowing users to ask questions, browse history, and manage text files with ease. The interface is designed to feel intuitive, encouraging exploration and active engagement with the learning material.

This app is built in ReactJS—meaning its very creation was a lesson in ReactJS. Every component, every route, and every stateful interaction reflects the practical application of the framework it's designed to teach. It's a living example of ReactJS in motion, where the learning tool is also a product of the learning process.

On the backend, FastAPI handles API requests, processes Gemini AI responses, manages SQLite database entries, and performs text file operations. It uses Pydantic for data validation and Python-dotenv for secure configuration management. FastAPI’s high performance ensures the app responds quickly and reliably to every user action.

The AI brain of the application is powered by the Gemini API. When users ask questions about ReactJS, the backend sends those questions to the Gemini model and returns detailed, intelligent responses. Each interaction is logged and stored, allowing users to revisit previous questions and continue building their knowledge base.

In addition to answering questions, the app offers full CRUD functionality for text files. Users can create, read, update, and delete custom files within a secure backend directory. These operations are seamlessly integrated into the React interface, making file management part of the overall learning and productivity experience.

A second page in the app showcases the entire history of user interactions. Questions, answers, and timestamps are displayed in a clear list, pulled directly from the SQLite database. This page serves as both a learning journal and a reference point for revisiting concepts over time.

Behind the scenes, the frontend and backend communicate using Axios for HTTP requests. When a user performs any action, such as submitting a question or creating a file, the frontend sends data to FastAPI. The backend processes the request and returns a response, which is instantly reflected in the user interface.

Together, this application creates a feedback loop of learning, practicing, and building. It empowers users to dive deep into ReactJS while witnessing its functionality firsthand. From dynamic components to real-time backend interactions, every feature is a teaching tool crafted with the same technology it teaches.