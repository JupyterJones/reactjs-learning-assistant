In React, `useRef` is a hook that lets you directly access a DOM element or any mutable value without causing a re-render.  It's primarily used for managing mutable values across renders *without* triggering updates to the component.  Think of it as a way to "persist" a value between renders.

**Key Characteristics:**

* **Persistence:** The value held by a ref persists throughout the component's lifecycle, even when the component re-renders.
* **No Re-renders:**  Modifying the ref's value directly does *not* cause the component to re-render.  This is crucial for performance optimization when dealing with things like direct DOM manipulation or tracking values that shouldn't trigger updates.


**Examples:**

**1. Accessing a DOM element:**

```javascript
import React, { useRef, useEffect } from 'react';

function MyComponent() {
  const inputRef = useRef(null);

  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus(); // Focus the input element after rendering
    }
  }, []);

  return (
    <div>
      <input type="text" ref={inputRef} />
    </div>
  );
}
```

Here, `inputRef` holds a reference to the `<input>` element.  The `useEffect` hook uses this reference to focus the input after the component mounts (the `[]` empty dependency array ensures this runs only once).

**2. Tracking a mutable value:**

```javascript
import React, { useRef, useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  const previousCountRef = useRef(0); // Tracks the previous count

  useEffect(() => {
    previousCountRef.current = count;
  }, [count]);

  return (
    <div>
      <p>Current Count: {count}</p>
      <p>Previous Count: {previousCountRef.current}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
```

In this example, `previousCountRef` stores the previous value of `count`.  Even though `count` updates, the previous value remains accessible.  This pattern is useful for comparing values across renders without triggering unnecessary re-renders.  Note that we update `previousCountRef.current` inside `useEffect` to ensure this happens after the `count` state update.


In short: use `useRef` when you need to access or persist a value between renders without triggering re-renders.  It's particularly useful for DOM manipulation and tracking values without impacting the component's rendering logic.